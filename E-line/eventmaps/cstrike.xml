<?xml version="1.0" ?>
<!-- Event map for Counter-Strike V1.5

This file instructs Admin Mod how to convert server messages into events that
plugins can use. See docs/EventsReadme for more information.

Variable usage:
	
0 = player that carries/planted bomb
1 = player that is vip
2 = player that is defusing
3 = player that removed last hostage	
4 = hostage kill flag. Set to 1 when a hostage is killed. Reset to 0 when that hostage model is removed from the game
5 = round starting flag: Set to 1 on game commencing / round end events. Cleared on round start message
-->

<eventmap game="cstrike">

	<variable name="bomber" type="integer" />
	<variable name="vip" type="integer" />
	<variable name="defuser" type="integer" />
	<variable name="rescuer" type="integer" />
	<variable name="hostagekilled" type="integer" value="0" />
	<variable name="roundstarting" type="integer" value="0" />



	<event name="game_start">
		<description>"Game Commencing" message displayed</description>
	</event>
	
	<event name="round_start">		
		<description>A round has started. Note this event occurs at the point the "cameras" switch back to the
			spawn point.  The players begin spawning immediately but sometimes take a second or two. The players 
			won't be able to move for another mp_freezetime seconds. The round will end in mp_roundtime*60 + mp_freezetime 
			seconds. NOTE: Sometimes the first player spawn event occurs before the round start
		</description>
	</event>

	<event name="round_end">
		<description>
		  A round has ended. This may be followed by a goal-specific round end 
		  event giving the reason a team won/lost unless the reason is all of one team died.
		</description>
		<argument name="WinningTeam" type="integer"/>
	</event>

	<event name="player_spawn">
		<description>
			A player first spawns on connecting at the point their client enters the
			3d world, but they spawn "dead" (use the player_info function to determine
			if a player is dead). Subsequently they spawn "alive" when their player
			respawns in the game (for the first time or for a new round). Players can
			also spawn dead if the are too slow changing team.  Players on the spectator
			team do not spawn. NOTE: A player can sometimes spawn twice on joining if
			they join near the start of a round - first they spawn dead as they enter the
			3d world, then the spawn alive after joining a team and choosing a model.
		</description>
		<argument name="UserIndex" type="integer"/>
	</event>

	<event name="player_team">
		<description>
			Player has joined a team on connecting or they have swapped teams.
			Automatic is 1 if the player was swapped teams by the game to balance
			them. It is not 1 for choosing autoselect when connecting/swapping or
			if an administrator swaps the players' team using admin mod.
		</description>

		<argument name="UserIndex" type="integer"/>
		<argument name="Team" type="integer"/>		
		<argument name="Automatic" type="integer"/>
	</event>

	<event name="player_health">
		<description>
			A player's Health changed for any reason. This inlcudes reseting their
			health on respawning.
		</description>
		<argument name="UserIndex" type="integer"/>
		<argument name="Health" type="integer"/>
	</event>

	<event name="player_death">
		<description>
			A player died for any reason (does not include disconnecting).
			For a suicide, KillerIndex == Victimindex and HLReason contains
			"world" or "worldspawn". For killings, HLReason contains the
			weapon used.
		</description>
	    
		<argument name="VictimIndex" type="integer"/>
		<argument name="Reason" type="string"/>
		<argument name="KillerIndex" type="integer"/>
		<argument name="Headshot" type="integer"/>
	</event>
	
	<event name="player_score">
		<description>A players score has changed.</description>
		<argument name="UserIndex" type="integer"/>
		<argument name="Kills" type="integer"/>
		<argument name="Deaths" type="integer"/>
	</event>
		

	<event name="hostage_spawned">
		<description>
			A Hostage has been spawned - occurs at the start of a round. X/Y/Z contain
			the co-ordinates of the hostage.
		</description>
		<argument name="HostageIndex" type="integer"/>
		<argument name="X" type="integer"/>
		<argument name="Y" type="integer"/>
		<argument name="Z" type="integer"/>
	</event>

	<event name="hostage_moved">
		<description>
			A Hostage has been moved for any reason, including following a CT, being pushed
			be a player, or being pushed by some game object (e.g. a door).			
		</description>
		<argument name="HostageIndex" type="integer"/>
		<argument name="X" type="integer"/>
		<argument name="Y" type="integer"/>
		<argument name="Z" type="integer"/>
	</event>
	
	<event name="rescue_zone">
		<description>
			Player from either team entered/left a rescue zone (due to movement or death/respawn)
			Enabled is 1 on entering the zone, and 0 on leaving it.
		</description>
		<argument name="UserIndex" type="integer"/>
		<argument name="Enabled" type="integer"/>
	</event>
		
	<event name="hostage_removed">
		<description>
			A hostage has been removed from game due to being rescued or being killed by a player.
			Killed = 1 for a kill, 0 for a rescue.
		</description>

		<argument name="UserIndex" type="integer"/>
		<argument name="HostageIndex" type="integer"/>
		<argument name="Killed" type="integer"/>
	</event>

	<event name="hostage_allrescued">
		<description>
			Occurs after a roudn end when CTs win due to rescuing all hostages. UserIndex is the
			player that rescued the last hostage (note: this player may have disconnected since
			and another taken the slot - watch for this). Look at the previous hostage removed 
			events to determine which player's rescued each hostage
		</description>      

		<argument name="UserIndex" type="integer"/>
	</event>
  
	<event name="hostage_notrescued">
	</event>
  
	
	

	<event name="bomb_spawn">
		<argument name="UserIndex" type="integer"/>
	</event>
  
	<event name="bomb_pickup">
		<argument name="UserIndex" type="integer"/>
	</event>
  	
	<event name="bomb_zone">
		<argument name="UserIndex" type="integer"/>
		<argument name="Enabled" type="integer"/>
	</event>

	<event name="bomb_planting">
		<argument name="UserIndex" type="integer"/>
		<argument name="Time" type="integer"/>
	</event>
			
	<event name="bomb_planted">
		<argument name="UserIndex" type="integer"/>
	</event>

	<event name="bomb_plantfailed">
		<argument name="UserIndex" type="integer"/>
	</event>

	<event name="bomb_defusing">
		<argument name="UserIndex" type="integer"/>
		<argument name="Time" type="integer"/>
		<argument name="Kit" type="integer"/>
	</event>
	
	<event name="bomb_defused">
		<argument name="UserIndex" type="integer"/>
	</event>
	  
	<event name="bomb_detonated">
		<argument name="UserIndex" type="integer"/>
	</event>
  
	<event name="bomb_notdetonated">  
	</event>
  
	<event name="bomb_dropped">
		<argument name="UserIndex" type="integer"/>
		<argument name="X" type="integer"/>
		<argument name="Y" type="integer"/>
		<argument name="Z" type="integer"/>
	</event>
  
	

	<event name="vip_change">
		<argument name="UserIndex" type="integer"/>
  	</event>
  
  	<event name="vip_escaped">
		<argument name="UserIndex" type="integer"/>  
	</event>
	
  	<event name="vip_notescaped">
		<argument name="UserIndex" type="integer"/>  
	</event>

	<event name="vip_death">
		<argument name="UserIndex" type="integer"/>
	</event>
	

	
	<event name="terrorist_escaped" />
	
	<event name="terrorist_notescaped" />



	<event name="buy_zone">
		<argument name="UserIndex" type="integer"/>
		<argument name="Enabled" type="integer"/>
	</event>

	<event name="money_change">
		<argument name="UserIndex" type="integer"/>
		<argument name="Money" type="integer"/>
	</event>

	<event name="weapon_pickup">
		<argument name="UserIndex" type="integer"/>
		<argument name="Weapon" type="integer"/>
	</event>

	<event name="ammo_pickup">
		<argument name="UserIndex" type="integer"/>
		<argument name="Type" type="integer"/>
		<argument name="Quantity" type="integer"/>
	</event>
	
	<event name="item_pickup">
		<argument name="UserIndex" type="integer"/>
		<argument name="Name" type="string"/>
	</event>
	
	<event name="weapon_stored">
		<argument name="UserIndex" type="integer"/>
		<argument name="Weapon" type="integer"/>
		<argument name="Ammo" type="integer"/>
	</event>
	
	<event name="weapon_change">
		<argument name="UserIndex" type="integer"/>
		<argument name="Weapon" type="integer"/>
		<argument name="Ammo" type="integer"/>
	</event>
		
	<event name="nightvision">
		<argument name="UserIndex" type="integer"/>
		<argument name="Enabled" type="integer"/>
	</event>
	
	<event name="player_damage">
		<argument name="UserIndex" type="integer"/>
		<argument name="AttackerIndex" type="integer"/>
		<argument name="Amount" type="integer"/>		
	</event>
	
	<!-- A nice simple example to start with. When a DeathMsg message occurs,
	     raise a death event, and copy the copys. Order is slightly different
	     so death event for other mods can have the first 3 copys in the same
	     order -->	    
	<message name="DeathMsg" event="player_death">
		<element type="integer">
			<copy type="integer" writeargument="KillerIndex" />
		</element>
		<element type="integer">
			<copy type="integer" writeargument="VictimIndex" />
		</element>
		<element type="integer">
			<copy type="integer" writeargument="Headshot" />
		</element>
		<element type="string">
			<copy type="string" writeargument="Reason" />
		</element>
	</message>

	<!-- Captures a health change. This uses a new feature - the copy in
	     inthe message tag instead of the element tag means capture the player
	     that sent the message -->
	<message name="Health" event="player_health">
		<copy type="integer" writeargument="UserIndex"/>
		<element type="integer">
			<copy type="integer" writeargument="Health" />
		</element>	
	</message>

	<message name="Damage" event="player_damage">
		<variable name="attackerX" type="float"/>
		<variable name="attackerY" type="float"/>
		<variable name="attackerZ" type="float"/>
		
		<copy type="integer" writeargument="UserIndex"/>
		<element type="integer"/>

		<element type="integer">
			<copy type="integer" writeargument="Amount" />			
			<option value="0" event="stop"/>
		</element>

		<element type="integer"/>

		<element type="float">
			<copy type="float" writevariable="attackerX"/>
		</element>

		<element type="float">
			<copy type="float" writevariable="attackerY"/>
		</element>

		<element type="float">
			<copy type="float" writevariable="attackerZ"/>
			<copy type="integer" readlocation="attacker" writeargument="AttackerIndex"/>
		</element>		
	</message>


	<!-- Use the display of the progress bar to track start of plant / defuse.
	     This example shows that a single tag can create more than one copy.
	     e.g. the last two options write the time and whehter a kit is used.
	     
	     This message shows the use of option tags to trap multiple events
	     from one message. The message tag doesn't have an event - instead
	     the each option tag has one.
	     
	     It is also the first use of memory.  There a numbered memory slots.
	     These copys copy the bomb planters index (readargument) to
	     memory slot 0, or hte bomb defusers index to memory slot 2. This
	     allows us to use these values in other messages where they are not
	     available as message elements.
	     
	     Also note the value attribute on the copys. This means ignore
	     the actual value in the message element and use this one instead.
	-->
	<message name="BarTime">
		<copy name="UserIndex" type="integer" writeargument="0"/>
		<element type="integer">
			<option value="3" event="bomb_planting">
				<copy type="integer" writeargument="Time"/>
				<copy type="integer" readargument="UserIndex" writevariable="bomber"/>
			</option>
			<option value="5" event="bomb_defusing">
				<copy type="integer" writeargument="Time"/>
				<copy type="integer" writeargument="Kit" value="1"/>
				<copy type="integer" readargument="UserIndex" writevariable="defuser"/>
			</option>
			<option value="10" event="bomb_defusing">
				<copy type="integer" writeargument="Time"/>
				<copy type="integer" writeargument="Kit" value="0"/>
				<copy type="integer" readargument="UserIndex" writevariable="defuser"/>
			</option>
		</element>
	</message>


	<!-- We trap audio events to detect various events. Therefore the message tag
	     doesn't have an event. Again option tags are used. Also we recall the
	     values stored in memory slots by the previous message and add those to 
	     the event copys so we can include the person who planted/defused in
	     the event.	     
	     
	     Also note the empty element at the top - we are skipping over a message
	     element that is of no interest.
	     -->
	<message name="SendAudio">
		<element type="integer">
		</element>
		<element type="string">
			<option value="%!MRAD_terwin" event="round_end">
				<copy type="integer" writeargument="WinningTeam" value="1" />
				<copy type="integer" writevariable="roundstarting" value="1" />
			</option>
			<option value="%!MRAD_ctwin" event="round_end">
				<copy type="integer" writeargument="WinningTeam" value="2" />
				<copy type="integer" writevariable="roundstarting" value="1" />
			</option>
			
			<option value="%!MRAD_BOMBPL" event="bomb_planted">
				<copy type="integer" writeargument="UserIndex" readvariable="bomber" />
			</option>
			
			<option value="%!MRAD_BOMBDEF" event="bomb_defused">
				<copy type="integer" writeargument="UserIndex" readvariable="defuser" />
			</option>
					
			<option value="%!MRAD_rounddraw" event="round_end">
				<copy type="integer" writeargument="WinningTeam" value="0" />
				<copy type="integer" writevariable="roundstarting" value="1" />
			</option>
		</element>
	</message>

	<!-- Trap the display of icons to detect players entering zones 
	
	     Also no item pickup event occurs for a bomb defuser purchase or pickup. Therefore
	     convert the appearance of the defuser icon into an item_pickup event.
	     
	     We need to reference arguments by number here rather than name as the event
	     isn't decided until the last element is seen
	-->
	<message name="StatusIcon">
		<copy name="UserIndex" type="integer" writeargument="0"/>
		<element type="integer">
			<copy name="Enable" type="integer" writeargument="1" />
		</element>
		<element type="string">
			<option value="buyzone" event="buy_zone" />
			<option value="c4" event="bomb_zone" />			
			<option value="defuser" event="item_pickup">
				<copy name="Name" type="string" writeargument="Name" value="defuser"/>
			</option>
			<option value="rescue" event="rescue_zone" />
		</element>
	</message>
	
	<!-- pEntity for this message contains valid players but they seem random ish
	     not always the player moving the hostages -->
	<message name="HostagePos" event="hostage_moved">		
		<element type="integer">
			<option value="1" event="hostage_spawned" />		
		</element>
		
		<element type="integer">
			<copy type="integer" writeargument="HostageIndex" />
		</element>
		<element type="float">
			<copy type="integer" writeargument="X" />
		</element>
		<element type="float">
			<copy type="integer" writeargument="Y" />
		</element>
		<element type="float">
			<copy type="integer" writeargument="Z" />
		</element>
	</message>
	
	<message name="Money" event="money_change">
		<copy type="integer" writeargument="UserIndex"/>
		<element type="integer">
			<copy type="integer" writeargument="Money" />
		</element>
	</message>

	<message name="WeapPickup" event="weapon_pickup">
		<copy type="integer" writeargument="UserIndex"/>
		<element type="integer">
			<copy type="integer" writeargument="Weapon" />
		</element>
	</message>
	
	<!-- This detects a VIP change. We write the VIP index to memory slot 1 for use with the rest
	     of the vip events -->
	<message name="HudText">
		<copy name="UserIndex" type="integer" writeargument="0"/>
		<element type="string">
			<option value="#Hint_you_are_the_vip" event="vip_change">
				<copy type="integer" readargument="UserIndex" writevariable="vip" />
			</option>
			<option value="#Hint_you_have_the_bomb" event="bomb_spawn">
				<copy type="integer" readargument="UserIndex" writevariable="bomber" />
			</option>
		</element>	
	</message>
	
	<!-- A generic TextMsg from the game translates into a large number of events. Sometimes
	     TextMsg has the player index available, sometimes it can't be read. This illustrates
	     an copy in an option tag overwriting an copy previously set in the message
	     tag.
	     
	     The player index is initially writing to position 0. But when this is not available,
	     some copy tags overwrite position 0 with other data. -->
	
	<message name="TextMsg">
				
		<copy name="UserIndex" type="integer" writeargument="0"/>
		<element type="integer"/>

		<element type="string">
			<option value="#Got_bomb" event="bomb_pickup" >				
				<copy type="integer" readargument="UserIndex" writevariable="bomber" />
			</option>
			<option value="#All_Hostages_Rescued" event="hostage_allrescued" >
				<!--Read the index of the rescuer from the previous HostageK event-->
				<copy type="integer" writeargument="UserIndex" readvariable="rescuer" />
			</option>			
			<option value="#Killed_Hostage">
				<!-- don't raise an event now, but flag a hostage death
				     so the killed copy can be set in the hostage_removed event -->
				<copy type="integer" writevariable="hostagekilled" value="1"/>
			</option>
			<option value="#Hostages_Not_Rescued" event="hostage_notrescued" />
			<option value="#C4_Plant_At_Bomb_Spot" event="bomb_plantfailed" />			
			<option value="#Target_Bombed" event="bomb_detonated">
				<!-- Read the bombers index from memory -->
				<copy type="integer" writeargument="UserIndex" readvariable="bomber" />
			</option>
			<option value="#Target_Saved" event="bomb_notdetonated" />
			<option value="#VIP_Escaped" event="vip_escaped" >
				<!-- Read the VIPs index from memory -->
				<copy type="integer" readvariable="vip" writeargument="UserIndex" />
			</option>
			<option value="#VIP_Not_Escaped" event="vip_notescaped">
				<copy type="integer" readvariable="vip" writeargument="UserIndex" />
			</option>
			<option value="#VIP_Assassinated" event="vip_death">
				<copy type="integer" readvariable="vip" writeargument="UserIndex" />
			</option>
			<option value="#Game_Commencing" event="game_start" >
				<copy type="integer" writevariable="roundstarting" value="1" />
			</option>
			<option value="#Terrorist_Escaped" event="terrorist_escaped" />
			<option value="#Terrorisst_NotEscaped" event="terrorist_notescaped" />
			
			<option value="#Game_join_ct" event="player_team">
				<copy type="integer" writeargument="Team" value="2"/>
				<copy type="integer" writeargument="Automatic" value="0"/>
			</option>
			<option value="#Game_join_terrorist" event="player_team">
				<copy type="integer" writeargument="Team" value="1"/>
				<copy type="integer" writeargument="Automatic" value="0"/>
			</option>
			<option value="#Game_join_ct_auto" event="player_team">
				<copy type="integer" writeargument="Team" value="2"/>
				<copy type="integer" writeargument="Automatic" value="1"/>
			</option>
			<option value="#Game_join_terrorist_auto" event="player_team">
				<copy type="integer" writeargument="Team" value="1"/>
				<copy type="integer" writeargument="Automatic" value="0"/>
			</option>
		</element>
		
		<!-- this element doesn't exist for all types of message but that isn't a problem.
		     nothing checks every element defined in this file was actually seen when the
		     message was generated. However since this message tag traps a number of events
		     not all of which have a username argument, we need to reference it by name
		     
		-->		     
		<element type="string">
			<copy type="string" writeargument="1"/>
		</element>
		
	</message>
	
	<message name="CurWeapon" event="weapon_stored">
		<copy type="integer" writeargument="UserIndex"/>
		<element type="integer">			
			<option value="1" event="weapon_change"/>			
		</element>
		<element type="integer">
			<copy type="integer" writeargument="Weapon" />			
		</element>
		<element type="integer">
			<copy type="integer" writeargument="Ammo" />
		</element>
	</message>
	

	<!-- NOTE: The copys on this message are of type integer but the
	           element is of type float. If an copy type does not match
	           the element type, Admin Mod will convert the value to the
	           desired type. So you can mix floats/integers/strings freely -->
	<message name="BombDrop" event="bomb_dropped">
		<copy type="integer" readvariable="bomber" writeargument="UserIndex" />
		<element type="float">
			<copy name="X" type="integer" writeargument="X"/>
		</element>
		<element type="float">
			<copy name="Y" type="integer" writeargument="Y"/>
		</element>
		<element type="float">
			<copy name="Z" type="integer" writeargument="Z"/>
		</element>
	</message>

	<message name="AmmoPickup" event="ammo_pickup">
		<copy type="integer" writeargument="UserIndex"/>
		<element type="integer">
			<copy type="integer" writeargument="Type"/>
		</element>
		<element type="integer">
			<copy type="integer" writeargument="Quantity"/>
		</element>
	</message>

	<message name="ItemPickup" event="item_pickup">
		<copy type="integer" writeargument="UserIndex"/>
		<element type="string">
			<copy type="string" writeargument="Name"/>
		</element>
	</message>

	<!-- This message occurs on hostage kill or rescue. To distinguish
	     between the two, we use memory slot 4 to store that a "hostage killed" TextMsg
	     message has occured since the last HostageK message.
	     
	     Therefore this message both reads and writes to memory slot 4. This 
	     illustrates that copys are processed in the order listed. -->
	<message name="HostageK" event="hostage_removed">
		<copy type="integer" writeargument="UserIndex"/>
		<copy type="integer" writevariable="rescuer" />
		<copy type="integer" readvariable="hostagekilled" writeargument="Killed"/>
		<copy type="integer" writevariable="hostagekilled" value="0"/>
		<element type="integer">
			<copy type="integer" writeargument="HostageIndex" />						
		</element>
	</message>

	<message name="NVGToggle" event="nightvision">
		<copy type="integer" writeargument="UserIndex"/>
		<element type="integer">
			<copy type="integer" writeargument="Enabled"/>
		</element>
	</message>

	<message name="ScoreInfo" event="player_score">
		<element type="integer">
			<copy type="integer" writeargument="UserIndex" />
		</element>
		<element type="integer">
			<copy type="integer" writeargument="Kills" />
		</element>
		<element type="integer">
			<copy type="integer" writeargument="Deaths" />
		</element>		
	</message>
	
	
	<!-- Here we have a set of options where the options are based on the value in
	     a memory cell rather than in a message element -->
	<message name="RoundTime">
		<switch type="integer" readvariable="roundstarting">
			<option value="1" event="round_start">
				<copy type="integer" writevariable="roundstarting" value="0" />
			</option>
		</switch>
	</message>

	<message name="ResetHUD" event="player_spawn">
		<copy type="integer" writeargument="UserIndex"/>
	</message>

</eventmap>
