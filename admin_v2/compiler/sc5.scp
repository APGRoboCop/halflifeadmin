/*  Small compiler - Error message strings (plain and compressed formats)
 *
 *  Copyright (c) ITB CompuPhase, 2000-2001
 *  This file may be freely used. No warranties of any kind.
 */

int strexpand(char *dest, char *source, int maxlen, unsigned char pairtable[128][2]);

#define SCPACK_TABLE errstr_table
/*-*SCPACK start of pair table, do not change or remove this line */
unsigned char errstr_table[][2] = {
  {116,32}, {101,32}, {111,110}, {105,110}, {100,32}, {97,114}, {105,130}, {101,110}, {101,114}, {115,32}, {97,108}, {97,116}, {114,101}, {117,110}, {97,110}, {109,135},
  {110,111}, {121,32}, {99,116}, {115,34}, {37,147}, {34,148}, {134,32}, {101,132}, {118,138}, {115,115}, {115,116}, {144,128}, {98,108}, {111,114}, {109,98}, {100,101},
  {103,117}, {105,132}, {102,141}, {160,143}, {162,146}, {133,163}, {152,161}, {114,97}, {99,104}, {41,10}, {131,166}, {101,100}, {101,120}, {164,150}, {97,32}, {117,115},
  {149,10}, {136,32}, {105,116}, {97,156}, {58,32}, {108,32}, {133,167}, {165,128}, {99,130}, {101,10}, {112,140}, {102,32}, {159,102}, {98,129}, {179,129}, {118,133},
  {115,10}, {182,145}, {111,187}, {131,103}, {191,105}, {105,137}, {97,153}, {121,158}, {157,32}, {111,181}, {196,190}, {115,199}, {203,201}, {109,97}, {100,105}, {175,128},
  {139,134}, {184,154}, {34,32}, {180,176}, {109,207}, {104,97}, {115,105}, {117,108}, {110,117}, {188,131}, {142,128}, {101,137}, {116,10}, {99,142}, {216,158}, {138,32},
  {222,177}, {105,99}, {108,111}, {112,111}, {116,111}, {111,112}, {109,139}, {229,136}, {202,149}, {221,155}, {186,153}, {44,32}, {195,32}, {230,168}, {133,97}, {172,234},
  {116,104}, {97,115}, {152,117}, {108,129}, {118,129}, {171,10}, {232,169}, {212,189}, {209,218}, {98,101}, {105,115}, {40,246}, {214,122}, {242,129}, {231,139}
};
/*-*SCPACK end of pair table, do not change or remove this line */

static char *errmsg[] = {
#ifdef SCPACK
/*001*/  "expected token: \"%s\", but found \"%s\"\n",
/*002*/  "only a single statement (or expression) can follow each \"case\"\n",
/*003*/  "reserved\n",
/*004*/  "function \"%s\" not defined\n",
/*005*/  "function may not have arguments\n",
/*006*/  "must be assigned to an array\n",
/*007*/  "assertion failed\n",
/*008*/  "must be a constant expression; assumed zero\n",
/*009*/  "invalid array size (negative or zero)\n",
/*010*/  "invalid function or declaration\n",
/*011*/  "invalid outside functions\n",
/*012*/  "invalid function call, not a valid address\n",
/*013*/  "no entry point (no public functions)\n",
/*014*/  "invalid statement; not in switch\n",
/*015*/  "\"default\" case must be the last case in switch statement\n",
/*016*/  "multiple defaults in \"switch\"\n",
/*017*/  "undefined symbol \"%s\"\n",
/*018*/  "initialization data exceeds declared size\n",
/*019*/  "not a label: \"%s\"\n",
/*020*/  "invalid symbol name \"%s\"\n",
/*021*/  "symbol already defined: \"%s\"\n",
/*022*/  "must be lvalue (non-constant)\n",
/*023*/  "array assignment must be simple assignment\n",
/*024*/  "\"break\" or \"continue\" is out of context\n",
/*025*/  "function heading differs from prototype\n",
/*026*/  "no matching \"#if...\"\n",
/*027*/  "invalid character constant\n",
/*028*/  "cannot subscript, not an array\n",
/*029*/  "invalid expression, assumed zero\n",
/*030*/  "compound statement not closed at the end of file\n",
/*031*/  "unknown directive\n",
/*032*/  "array index out of bounds (variable \"%s\")\n",
/*033*/  "array must be indexed (variable \"%s\")\n",
/*034*/  "argument does not have a default value (argument %d)\n",
/*035*/  "argument type mismatch (argument %d)\n",
/*036*/  "empty statement\n",
/*037*/  "invalid string (possibly non-terminated string)\n",
/*038*/  "extra characters on line\n",
/*039*/  "constant symbol has no size\n",
/*040*/  "duplicate \"case\" label (value %d)\n",
/*041*/  "invalid ellipsis, array size is not known\n",
/*042*/  "invalid combination of class specifiers\n",
/*043*/  "character constant exceeds range for packed string\n",
/*044*/  "positional parameters must precede all named parameters\n",
/*045*/  "too many function arguments\n",
/*046*/  "unknown array size (variable \"%s\")\n",
/*047*/  "array sizes must match\n",
/*048*/  "array dimensions must match\n",
/*049*/  "invalid line continuation\n",
/*050*/  "invalid range\n",
/*051*/  "invalid subscript, use \"[ ]\" operators on major dimensions\n",
/*052*/  "only the last dimension may be variable length\n",
/*053*/  "exceeding maximum number of dimensions\n",
/*054*/  "unmatched closing brace\n",
/*055*/  "start of function body without function header\n",
/*056*/  "local variables and function arguments cannot be public (variable \"%s\")\n",
/*057*/  "unfinished expression before compiler directive\n",
/*058*/  "duplicate argument; same argument is passed twice\n",
/*059*/  "function argument may not have a default value (variable \"%s\")\n",
/*060*/  "multiple \"#else\" directives between \"#if ... #endif\"\n",
/*061*/  "operator cannot be redefined\n",
/*062*/  "number of operands does not fit the operator\n",
/*063*/  "operator \"!\" requires an untagged function result\n",
/*064*/  "cannot change predefined operators\n",
/*065*/  "function argument may only have a single tag (argument %d)\n",
/*066*/  "function argument may not be a reference argument or an array (argument %d)\n",
/*067*/  "variable cannot be both a reference and an array (variable \"%s\")\n",
/*068*/  "invalid rational number precision in #pragma\n",
/*069*/  "rational number format already defined\n",
/*070*/  "rational number support was not enabled\n"
#else
  "\254pe\222\227\344k\207\264\225\353bu\200fo\215\204\260",
  "\202l\221\256s\303\363\232\213e\217\200(\310\357\206) \335 fol\342w ea\250 \042c\361e\042\012",
  "\214s\210v\365",
  "\255\225 \233\331\365",
  "\255\315\221\233\325\364\245t\300",
  "\367\306ign\227\344 \216 \266y\012",
  "\306\210t\226fail\365",
  "\367\256\370\357\206; \306um\227z\210o\012",
  "\252\301\374\201(neg\213i\364\310z\210o\251",
  "\252\255\310\237cl\205\320\012",
  "\252out\326d\201\244\206\300",
  "\252\255c\212l\353\233\256\246add\214\231\012",
  "\220 \207tr\221\343\203\200(\220 pu\234\341 \244\206s\251",
  "\252\232\213e\217t; \233\203 sw\262\250\012",
  "\042\274a\327t\322c\361\201\367\360\201l\361\200c\361\201\203 sw\262\250 \232\213e\217\334",
  "m\327tip\363\274a\327t\211\203 \042sw\262\250\042\012",
  "\215\331\227\314\260",
  "\203\262i\212iz\213\226d\213\256\254ce\253\211\237cl\205\227\374\271",
  "\233\256la\371l\323",
  "\252\314nam\201\260",
  "\314\212\214ad\221\331\253\323",
  "\367l\375(n\202-\321\216t\251",
  "\301\306ign\217\200\367\326mp\363\306ign\217\334",
  "\042b\214ak\322\310\042\270t\203ue\322\305ou\200\302\270t\254\334",
  "\255head\354\316ff\210\211from pro\344typ\271",
  "\220 \355\354\042#if...\042\012",
  "\252\250\356\222\261\321\216\334",
  "\351subscript\353\233\216 \266y\012",
  "\252\357\206\353\306um\227z\210o\012",
  "com\343\215\204\232\213e\217\200\233c\342s\227a\200\360\201\207\204\302fil\271",
  "\215k\220wn \316\214\222iv\271",
  "\301\203\237x ou\200\302bo\215d\211\373",
  "\301\367\203\237x\227\373",
  "\267do\333\233\325\364\256\274a\327\200\375(\267%d\251",
  "\267typ\201m\372\355 (\267%d\251",
  "empt\221\232\213e\217\334",
  "\252\232r\354(\343\231i\234\221n\202-t\210m\203\213\227\232r\303\251",
  "\254t\247 \250\356\222\210\211\202 l\203\271",
  "\370\314\325\211\220 \374\271",
  "dupl\341\213\201\042c\361e\322la\371\265(\375%d\251",
  "\252ellip\326s\353\301\374\201\305\233k\220wn\012",
  "\252co\236\203\213\226\302cl\361\211specifi\210\300",
  "\250\356\222\261\370\254ce\253\211r\216g\201f\310pack\227\232r\303\012",
  "\343s\262\206\337p\356met\210\211\324\272c\253\201\212\265nam\227p\356met\210\300",
  "\344o m\216\221\255\245t\300",
  "\215k\220wn \301\374\201\373",
  "\301\374\333\324\355\012",
  "\301\316\217s\206\211\324\355\012",
  "\252l\203\201\270t\203u\320\012",
  "\252r\216g\271",
  "\252subscript\353\257\201\042[ ]\322\376\235\211\202 \315j\310\316\217s\206\300",
  "\202l\221\360\201l\361\200\316\217s\226\315\221\275\312l\207g\360\012",
  "\254ce\253\354\315ximum \340\302\316\217s\206\300",
  "\215\355\227c\342s\354b\247c\271",
  "\232\205\200\302\255bod\221w\262hou\200\255head\210\012",
  "\342c\337\304\263\333\216\204\255\245t\211\351\275pu\234\341 \373",
  "\215f\203\372h\227\357\226\371f\235\201compil\261\316\214\222iv\271",
  "dupl\341\213\201\245t; sam\201\267\305p\306\227tw\341\271",
  "\255\267\315\221\233\325\364\256\274a\327\200\375\373",
  "m\327tip\363\042#else\322\316\214\222iv\333\371twe\207 \042#i\273... #\207\316f\042\012",
  "\376\310\351\275\214\331\365",
  "\340\302\347\216d\211do\333\233fi\200\360\201\376\235\012",
  "\376\310\042!\322\214qui\214\211\216 \215tagg\227\255\214s\327\334",
  "\351\250\216g\201\272\331\227\376\235\300",
  "\255\267\315\221\202l\221\325\364\256s\303\363tag (\267%d\251",
  "\255\267\315\221\233\275\256\214f\210\207c\201\267\310\216 \301(\267%d\251",
  "\312\351\275bo\360 \256\214f\210\207c\201\216\204\216 \301\373",
  "\252r\320\337\340\272c\372\226\203 #p\247g\315\012",
  "r\320\337\340f\235\315\200\212\214ad\221\331\365",
  "r\320\337\340supp\235\200wa\211\233\207\263\365"
#endif
       };

static char *fatalmsg[] = {
#ifdef SCPACK
/*100*/  "cannot read from file: \"%s\"\n",
/*101*/  "cannot write to file: \"%s\"\n",
/*102*/  "table overflow: \"%s\"\n",
          /* table can be: loop table
           *               literal table
           *               staging buffer
           *               parser stack (recursive include?)
           *               option table (response file)
           *               peephole optimizer table
           */
/*103*/  "insufficient memory\n",
/*104*/  "invalid assembler instruction \"%s\"\n",
/*105*/  "numeric overflow, exceeding capacity\n"
#else
  "\351\214a\204from file\323",
  "\351wr\262\201\344 file\323",
  "t\276ov\210f\342w\323",
  "\203suff\341i\207\200mem\235y\012",
  "\252\306em\234\261\203\232ru\222\226\260",
  "\330m\210\341 ov\210f\342w\353\254ce\253\354capac\262y\012"
#endif
       };

static char *warnmsg[] = {
#ifdef SCPACK
/*200*/  "symbol \"%s\" is truncated to %d characters\n",
/*201*/  "redefinition of constant (symbol \"%s\")\n",
/*202*/  "number of arguments does not match definition\n",
/*203*/  "symbol is never used: \"%s\"\n",
/*204*/  "symbol is assigned a value that is never used: \"%s\"\n",
/*205*/  "redundant code: constant expression is zero\n",
/*206*/  "redundant test: constant expression is non-zero\n",
/*207*/  "unknown #pragma\n",
/*208*/  "function uses both \"return;\" and \"return <value>;\"\n",
/*209*/  "function should return a value\n",
/*210*/  "possible use of symbol before initialization: \"%s\"\n",
/*211*/  "possibly unintended assignment\n",
/*212*/  "possibly unintended bitwise operation\n",
/*213*/  "tag mismatch\n",
/*214*/  "possibly a \"const\" array argument was intended: \"%s\"\n",
/*215*/  "expression has no effect\n",
/*216*/  "nested comment\n",
/*217*/  "loose indentation\n",
/*218*/  "old style prototypes used with optional semicolumns\n",
/*219*/  "local variable \"%s\" shadows a variable at a preceding level\n",
/*220*/  "exported or native symbol \"%s\" is truncated to %d characters\n",
/*221*/  "label name \"%s\" shadows tag name\n",
/*222*/  "number of digits exceeds rational number precision\n",
/*223*/  "vulgar tongue: word \"%s\"\n"
#else
  "\314\225 \305tr\215c\213\227\344 %\204\250\356\222\210\300",
  "\214\331\262\226\302\370(\314\225\251",
  "\340\302\245t\211do\333\233\355 \331\262\206\012",
  "\314\305nev\261\257\253\323",
  "\314\305\306ign\227\256\375t\325\200\305nev\261\257\253\323",
  "\214d\215d\332co\237\264\370\357\226\305z\210o\012",
  "\214d\215d\332te\232\264\370\357\226\305n\202-z\210o\012",
  "\215k\220wn #p\247g\315\012",
  "\255\257\333bo\360 \042\214turn;\322\216\204\042\214turn <\362e>;\042\012",
  "\255sho\327\204\214turn \256\362\271",
  "\343\231i\234\201\257\201\302\314\371f\235\201\203\262i\212iz\320\323",
  "\343\231i\234\221\215\203t\207d\227\306ign\217\334",
  "\343\231i\234\221\215\203t\207d\227b\262w\372\201\347\320\012",
  "tag m\372\355\012",
  "\343\231i\234\221\256\042\321\322\301\267wa\211\203t\207\237d\323",
  "\357\226\325\211\220 effe\222\012",
  "ne\232\227com\217\334",
  "\342os\201\203d\207t\320\012",
  "ol\204\232y\363pro\344typ\333\257\227w\262h \345t\206\337sem\341olumn\300",
  "\342c\337\350 s\325dow\211\256\312a\200\256\272c\253\354level\012",
  "\254p\235t\227\310n\213i\364\314\225 \305tr\215c\213\227\344 %\204\250\356\222\210\300",
  "la\371\265nam\201\225 s\325dow\211tag nam\271",
  "\340\302\316g\262\211\254ce\253\211r\320\337\340\272c\372\206\012",
  "v\327g\205 t\202\240e\264w\235\204\260"
#endif
       };
