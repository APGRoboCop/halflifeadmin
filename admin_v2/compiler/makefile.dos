# include directory
INCLUDE=../AMX

!ifdef NDEBUG
  CDEBUG=-DNDEBUG
  LDEBUG=
!else
  CDEBUG=$(CCDEBUG)     #compiler-specific macro
  LDEBUG=$(LLDEBUG)     #compiler-specific macro
!endif

!ifdef BC31
  # Borland C++ 3.1
  # ---------------
  CDIR    =d:\programm\bc31
  MODEL   =l
  CC      =$(CDIR)\bin\bcc -c -d -w -m$(MODEL) $(CDEBUG)
  LINK    =$(CDIR)\bin\tlink /c /s/l /L$(CDIR)\lib $(LDEBUG)
  STARTOBJ=c0$(MODEL).obj
  LIBS    =c$(MODEL)
  DEFFILE =
  RCFILE  =
  CCDEBUG =-v
  LLDEBUG =-v
!endif

!ifdef BC31W
  # Borland C++ 3.1 & Winio (for Borland 5.2, use large model)
  # ----------------------------------------------------------
  CDIR    =d:\programm\bc31
  MODEL   =l
  CC      =$(CDIR)\bin\bcc -c -d -w -m$(MODEL) $(CDEBUG) -WS
  LINK    =$(CDIR)\bin\tlink /c /m/l/s /L$(CDIR)\lib $(LDEBUG) -Twe
  STARTOBJ=c0w$(MODEL).obj
  LIBS    =cw$(MODEL) import  # math$(MODEL)
  DEFFILE =sc
  RCFILE  =
  CCDEBUG =-v
  LLDEBUG =-v
!endif

!ifdef MSC6
  # Microsoft C 6.0 (16-bit)
  # ------------------------
  # To use CV for debugging, add /Zi to the CLM and MLM macros and /CO to LNKM
  MODEL=L
  CC=cl -c -A$(MODEL) -Ocls -qc -W4 -nologo -Zi
  LINK=link /NOE /NOD /NOLOGO /CO /ST:4096
  STARTOBJ=
  LIBS=$(MODEL)libce.lib
  RCFILE  =
  CCDEBUG =-Zi
  LLDEBUG =/CO
!endif

!ifdef GCC
  # GCC (for Linux), see also specific makefile in Linux directory
  # ---------------
  CC      =gcc
  CFLAGS  =-O2 -I$(INCLUDE) -I../LINUX -DLINUX -g
  LINK    =gcc
  LINKFLAGS=
  CCDEBUG =
  LLDEBUG =
  objs=sc1.o sc2.o sc3.o sc4.o sc5.o sc6.o sc7.o scvars.o

  %.o: %.c sc.h ;
  	$(CC) -c $(CFLAGS) $(CPPFLAGS) -o $@ $<

  sc:	$(OBJS)
  	$(LINK) $(LINKFLAGS) $(OBJS) -o $(TARGET)
!endif

!ifndef STARTOBJ        #this is the default
  WCC = 1
  # Watcom C/C++ 11.0 (see also note on using an alternative LINK command line)
  # -----------------
  CC      =wcc386 -w4 -otexan -bt=nt $(CDEBUG) -3s -mf -zq
  LINK    =wlink $(LDEBUG) NAME sc.exe SYS nt op m
  STARTOBJ=
  LIBS    =
  RCFILE  =
  CCDEBUG =/d2 /hc
  LLDEBUG =d codeview op cvpack
!endif


#
# Interference rules
#
.c.obj :
  $(CC) $*.c

.sch.scp :
  scpack $*.sch $*.scp

sc.exe : sc1.obj sc2.obj sc3.obj sc4.obj sc5.obj sc6.obj sc7.obj scvars.obj scexpand.obj
  !ifdef WCC
    #for Watcom C/C++ 11.0 use:
    $(LINK) FIL sc1.obj,sc2.obj,sc3.obj,sc4.obj,sc5.obj,sc6.obj,sc7.obj,scvars.obj,scexpand.obj
  !else
    #all other compilers use the syntax below
    $(LINK) $(STARTOBJ) sc1 sc2 sc3 sc4 sc5 sc6 sc7 scvars scexpand,sc,sc,$(LIBS),$(DEFFILE)
  !endif

sc1.obj : sc1.c sc.h

sc2.obj : sc2.c sc.h

sc3.obj : sc3.c sc.h

sc4.obj : sc4.c sc.h

sc5.obj : sc5.c sc5.scp sc.h

sc6.obj : sc6.c sc.h

sc7.obj : sc7.c sc7.scp sc.h

scvars.obj : scvars.c sc.h

scexpand.obj : scexpand.c sc.h

# the .SCH files are the same as the .SCP files (as SCPACK changes files "in
# place"). The different extensions were chosen to make MAKE happy. So to get
# a .SCH file from a .SCP file, simply copy it.

sc5.scp : sc5.sch

sc7.scp : sc7.sch

